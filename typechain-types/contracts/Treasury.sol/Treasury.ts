/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TreasuryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FINAL_SUPPLY_TARGET"
      | "F_TOKEN"
      | "F_TOKEN_CONTRACT_ADDRESS"
      | "PANCAKE_ROUTER"
      | "PRICE_FEED"
      | "REBURN_ACTIVATION_TIMESTAMP"
      | "STABLECOIN"
      | "STAKING_CONTRACT"
      | "depositFees"
      | "executeReburn"
      | "getFTokenPrice"
      | "lastBuybackTimestamp"
      | "owner"
      | "protectSoftFloor"
      | "renounceOwnership"
      | "setSoftFloorPrice"
      | "softFloorPrice"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundsReceived"
      | "OwnershipTransferred"
      | "ReburnExecuted"
      | "SoftFloorPriceUpdated"
      | "SoftFloorProtected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FINAL_SUPPLY_TARGET",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "F_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "F_TOKEN_CONTRACT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PANCAKE_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REBURN_ACTIVATION_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STABLECOIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeReburn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastBuybackTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protectSoftFloor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSoftFloorPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "softFloorPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "FINAL_SUPPLY_TARGET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "F_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "F_TOKEN_CONTRACT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PANCAKE_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRICE_FEED", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REBURN_ACTIVATION_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STABLECOIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeReburn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBuybackTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protectSoftFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSoftFloorPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "softFloorPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace FundsReceivedEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReburnExecutedEvent {
  export type InputTuple = [
    amountBought: BigNumberish,
    amountBurned: BigNumberish
  ];
  export type OutputTuple = [amountBought: bigint, amountBurned: bigint];
  export interface OutputObject {
    amountBought: bigint;
    amountBurned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SoftFloorPriceUpdatedEvent {
  export type InputTuple = [newPrice: BigNumberish];
  export type OutputTuple = [newPrice: bigint];
  export interface OutputObject {
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SoftFloorProtectedEvent {
  export type InputTuple = [
    amountBought: BigNumberish,
    currentPrice: BigNumberish
  ];
  export type OutputTuple = [amountBought: bigint, currentPrice: bigint];
  export interface OutputObject {
    amountBought: bigint;
    currentPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Treasury extends BaseContract {
  connect(runner?: ContractRunner | null): Treasury;
  waitForDeployment(): Promise<this>;

  interface: TreasuryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FINAL_SUPPLY_TARGET: TypedContractMethod<[], [bigint], "view">;

  F_TOKEN: TypedContractMethod<[], [string], "view">;

  F_TOKEN_CONTRACT_ADDRESS: TypedContractMethod<[], [string], "view">;

  PANCAKE_ROUTER: TypedContractMethod<[], [string], "view">;

  PRICE_FEED: TypedContractMethod<[], [string], "view">;

  REBURN_ACTIVATION_TIMESTAMP: TypedContractMethod<[], [bigint], "view">;

  STABLECOIN: TypedContractMethod<[], [string], "view">;

  STAKING_CONTRACT: TypedContractMethod<[], [string], "view">;

  depositFees: TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;

  executeReburn: TypedContractMethod<[], [void], "nonpayable">;

  getFTokenPrice: TypedContractMethod<[], [bigint], "view">;

  lastBuybackTimestamp: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  protectSoftFloor: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setSoftFloorPrice: TypedContractMethod<
    [_newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  softFloorPrice: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FINAL_SUPPLY_TARGET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "F_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "F_TOKEN_CONTRACT_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PANCAKE_ROUTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PRICE_FEED"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REBURN_ACTIVATION_TIMESTAMP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STABLECOIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STAKING_CONTRACT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositFees"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeReburn"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getFTokenPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastBuybackTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protectSoftFloor"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSoftFloorPrice"
  ): TypedContractMethod<[_newPrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "softFloorPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FundsReceived"
  ): TypedContractEvent<
    FundsReceivedEvent.InputTuple,
    FundsReceivedEvent.OutputTuple,
    FundsReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReburnExecuted"
  ): TypedContractEvent<
    ReburnExecutedEvent.InputTuple,
    ReburnExecutedEvent.OutputTuple,
    ReburnExecutedEvent.OutputObject
  >;
  getEvent(
    key: "SoftFloorPriceUpdated"
  ): TypedContractEvent<
    SoftFloorPriceUpdatedEvent.InputTuple,
    SoftFloorPriceUpdatedEvent.OutputTuple,
    SoftFloorPriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SoftFloorProtected"
  ): TypedContractEvent<
    SoftFloorProtectedEvent.InputTuple,
    SoftFloorProtectedEvent.OutputTuple,
    SoftFloorProtectedEvent.OutputObject
  >;

  filters: {
    "FundsReceived(address,uint256)": TypedContractEvent<
      FundsReceivedEvent.InputTuple,
      FundsReceivedEvent.OutputTuple,
      FundsReceivedEvent.OutputObject
    >;
    FundsReceived: TypedContractEvent<
      FundsReceivedEvent.InputTuple,
      FundsReceivedEvent.OutputTuple,
      FundsReceivedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReburnExecuted(uint256,uint256)": TypedContractEvent<
      ReburnExecutedEvent.InputTuple,
      ReburnExecutedEvent.OutputTuple,
      ReburnExecutedEvent.OutputObject
    >;
    ReburnExecuted: TypedContractEvent<
      ReburnExecutedEvent.InputTuple,
      ReburnExecutedEvent.OutputTuple,
      ReburnExecutedEvent.OutputObject
    >;

    "SoftFloorPriceUpdated(uint256)": TypedContractEvent<
      SoftFloorPriceUpdatedEvent.InputTuple,
      SoftFloorPriceUpdatedEvent.OutputTuple,
      SoftFloorPriceUpdatedEvent.OutputObject
    >;
    SoftFloorPriceUpdated: TypedContractEvent<
      SoftFloorPriceUpdatedEvent.InputTuple,
      SoftFloorPriceUpdatedEvent.OutputTuple,
      SoftFloorPriceUpdatedEvent.OutputObject
    >;

    "SoftFloorProtected(uint256,int256)": TypedContractEvent<
      SoftFloorProtectedEvent.InputTuple,
      SoftFloorProtectedEvent.OutputTuple,
      SoftFloorProtectedEvent.OutputObject
    >;
    SoftFloorProtected: TypedContractEvent<
      SoftFloorProtectedEvent.InputTuple,
      SoftFloorProtectedEvent.OutputTuple,
      SoftFloorProtectedEvent.OutputObject
    >;
  };
}
