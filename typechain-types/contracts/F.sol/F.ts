/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BURN_STOP_THRESHOLD"
      | "LAUNCH_TIMESTAMP"
      | "MAX_SUPPLY"
      | "STAKING_CONTRACT"
      | "TREASURY_CONTRACT"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "deadblockCount"
      | "decimals"
      | "dynamicCooldownSeconds"
      | "feeConfigPhase1"
      | "feeConfigPhase2"
      | "launchBlockNumber"
      | "maxWalletHolding"
      | "name"
      | "owner"
      | "pancakeSwapPair"
      | "renounceOwnership"
      | "setDynamicCooldown"
      | "setFeeExempt"
      | "setLimitExempt"
      | "setPancakeSwapPair"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BotTransactionRedirected"
      | "CooldownChanged"
      | "FeeExemptionChanged"
      | "FeesDistributed"
      | "LimitExemptionChanged"
      | "OwnershipTransferred"
      | "PancakeSwapPairSet"
      | "Transfer"
      | "WalletLocked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BURN_STOP_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LAUNCH_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deadblockCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dynamicCooldownSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeConfigPhase1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeConfigPhase2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "launchBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletHolding",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeSwapPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDynamicCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeExempt",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitExempt",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPancakeSwapPair",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BURN_STOP_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LAUNCH_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deadblockCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dynamicCooldownSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeConfigPhase1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeConfigPhase2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletHolding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeSwapPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDynamicCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPancakeSwapPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BotTransactionRedirectedEvent {
  export type InputTuple = [botAddress: AddressLike, amount: BigNumberish];
  export type OutputTuple = [botAddress: string, amount: bigint];
  export interface OutputObject {
    botAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CooldownChangedEvent {
  export type InputTuple = [newCooldown: BigNumberish];
  export type OutputTuple = [newCooldown: bigint];
  export interface OutputObject {
    newCooldown: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeExemptionChangedEvent {
  export type InputTuple = [account: AddressLike, isExempt: boolean];
  export type OutputTuple = [account: string, isExempt: boolean];
  export interface OutputObject {
    account: string;
    isExempt: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesDistributedEvent {
  export type InputTuple = [
    burnAmount: BigNumberish,
    stakingAmount: BigNumberish,
    liquidityAmount: BigNumberish
  ];
  export type OutputTuple = [
    burnAmount: bigint,
    stakingAmount: bigint,
    liquidityAmount: bigint
  ];
  export interface OutputObject {
    burnAmount: bigint;
    stakingAmount: bigint;
    liquidityAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LimitExemptionChangedEvent {
  export type InputTuple = [account: AddressLike, isExempt: boolean];
  export type OutputTuple = [account: string, isExempt: boolean];
  export interface OutputObject {
    account: string;
    isExempt: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PancakeSwapPairSetEvent {
  export type InputTuple = [pair: AddressLike];
  export type OutputTuple = [pair: string];
  export interface OutputObject {
    pair: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletLockedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    amount: BigNumberish,
    lockUntil: BigNumberish
  ];
  export type OutputTuple = [wallet: string, amount: bigint, lockUntil: bigint];
  export interface OutputObject {
    wallet: string;
    amount: bigint;
    lockUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface F extends BaseContract {
  connect(runner?: ContractRunner | null): F;
  waitForDeployment(): Promise<this>;

  interface: FInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BURN_STOP_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  LAUNCH_TIMESTAMP: TypedContractMethod<[], [bigint], "view">;

  MAX_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  STAKING_CONTRACT: TypedContractMethod<[], [string], "view">;

  TREASURY_CONTRACT: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  deadblockCount: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  dynamicCooldownSeconds: TypedContractMethod<[], [bigint], "view">;

  feeConfigPhase1: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        burnFee: bigint;
        stakingFee: bigint;
        liquidityFee: bigint;
      }
    ],
    "view"
  >;

  feeConfigPhase2: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        burnFee: bigint;
        stakingFee: bigint;
        liquidityFee: bigint;
      }
    ],
    "view"
  >;

  launchBlockNumber: TypedContractMethod<[], [bigint], "view">;

  maxWalletHolding: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pancakeSwapPair: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDynamicCooldown: TypedContractMethod<
    [newCooldownSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeExempt: TypedContractMethod<
    [account: AddressLike, isExempt: boolean],
    [void],
    "nonpayable"
  >;

  setLimitExempt: TypedContractMethod<
    [account: AddressLike, isExempt: boolean],
    [void],
    "nonpayable"
  >;

  setPancakeSwapPair: TypedContractMethod<
    [_pair: AddressLike],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BURN_STOP_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LAUNCH_TIMESTAMP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STAKING_CONTRACT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TREASURY_CONTRACT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deadblockCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dynamicCooldownSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeConfigPhase1"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        burnFee: bigint;
        stakingFee: bigint;
        liquidityFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeConfigPhase2"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        burnFee: bigint;
        stakingFee: bigint;
        liquidityFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "launchBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWalletHolding"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pancakeSwapPair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDynamicCooldown"
  ): TypedContractMethod<
    [newCooldownSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeExempt"
  ): TypedContractMethod<
    [account: AddressLike, isExempt: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLimitExempt"
  ): TypedContractMethod<
    [account: AddressLike, isExempt: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPancakeSwapPair"
  ): TypedContractMethod<[_pair: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BotTransactionRedirected"
  ): TypedContractEvent<
    BotTransactionRedirectedEvent.InputTuple,
    BotTransactionRedirectedEvent.OutputTuple,
    BotTransactionRedirectedEvent.OutputObject
  >;
  getEvent(
    key: "CooldownChanged"
  ): TypedContractEvent<
    CooldownChangedEvent.InputTuple,
    CooldownChangedEvent.OutputTuple,
    CooldownChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeeExemptionChanged"
  ): TypedContractEvent<
    FeeExemptionChangedEvent.InputTuple,
    FeeExemptionChangedEvent.OutputTuple,
    FeeExemptionChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeesDistributed"
  ): TypedContractEvent<
    FeesDistributedEvent.InputTuple,
    FeesDistributedEvent.OutputTuple,
    FeesDistributedEvent.OutputObject
  >;
  getEvent(
    key: "LimitExemptionChanged"
  ): TypedContractEvent<
    LimitExemptionChangedEvent.InputTuple,
    LimitExemptionChangedEvent.OutputTuple,
    LimitExemptionChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PancakeSwapPairSet"
  ): TypedContractEvent<
    PancakeSwapPairSetEvent.InputTuple,
    PancakeSwapPairSetEvent.OutputTuple,
    PancakeSwapPairSetEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WalletLocked"
  ): TypedContractEvent<
    WalletLockedEvent.InputTuple,
    WalletLockedEvent.OutputTuple,
    WalletLockedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BotTransactionRedirected(address,uint256)": TypedContractEvent<
      BotTransactionRedirectedEvent.InputTuple,
      BotTransactionRedirectedEvent.OutputTuple,
      BotTransactionRedirectedEvent.OutputObject
    >;
    BotTransactionRedirected: TypedContractEvent<
      BotTransactionRedirectedEvent.InputTuple,
      BotTransactionRedirectedEvent.OutputTuple,
      BotTransactionRedirectedEvent.OutputObject
    >;

    "CooldownChanged(uint256)": TypedContractEvent<
      CooldownChangedEvent.InputTuple,
      CooldownChangedEvent.OutputTuple,
      CooldownChangedEvent.OutputObject
    >;
    CooldownChanged: TypedContractEvent<
      CooldownChangedEvent.InputTuple,
      CooldownChangedEvent.OutputTuple,
      CooldownChangedEvent.OutputObject
    >;

    "FeeExemptionChanged(address,bool)": TypedContractEvent<
      FeeExemptionChangedEvent.InputTuple,
      FeeExemptionChangedEvent.OutputTuple,
      FeeExemptionChangedEvent.OutputObject
    >;
    FeeExemptionChanged: TypedContractEvent<
      FeeExemptionChangedEvent.InputTuple,
      FeeExemptionChangedEvent.OutputTuple,
      FeeExemptionChangedEvent.OutputObject
    >;

    "FeesDistributed(uint256,uint256,uint256)": TypedContractEvent<
      FeesDistributedEvent.InputTuple,
      FeesDistributedEvent.OutputTuple,
      FeesDistributedEvent.OutputObject
    >;
    FeesDistributed: TypedContractEvent<
      FeesDistributedEvent.InputTuple,
      FeesDistributedEvent.OutputTuple,
      FeesDistributedEvent.OutputObject
    >;

    "LimitExemptionChanged(address,bool)": TypedContractEvent<
      LimitExemptionChangedEvent.InputTuple,
      LimitExemptionChangedEvent.OutputTuple,
      LimitExemptionChangedEvent.OutputObject
    >;
    LimitExemptionChanged: TypedContractEvent<
      LimitExemptionChangedEvent.InputTuple,
      LimitExemptionChangedEvent.OutputTuple,
      LimitExemptionChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PancakeSwapPairSet(address)": TypedContractEvent<
      PancakeSwapPairSetEvent.InputTuple,
      PancakeSwapPairSetEvent.OutputTuple,
      PancakeSwapPairSetEvent.OutputObject
    >;
    PancakeSwapPairSet: TypedContractEvent<
      PancakeSwapPairSetEvent.InputTuple,
      PancakeSwapPairSetEvent.OutputTuple,
      PancakeSwapPairSetEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WalletLocked(address,uint256,uint256)": TypedContractEvent<
      WalletLockedEvent.InputTuple,
      WalletLockedEvent.OutputTuple,
      WalletLockedEvent.OutputObject
    >;
    WalletLocked: TypedContractEvent<
      WalletLockedEvent.InputTuple,
      WalletLockedEvent.OutputTuple,
      WalletLockedEvent.OutputObject
    >;
  };
}
