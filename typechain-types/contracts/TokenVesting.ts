/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TokenVestingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BENEFICIARY"
      | "CLIFF_DURATION"
      | "TOKEN"
      | "TOTAL_VESTING_DURATION"
      | "VESTING_START_TIMESTAMP"
      | "depositVestingTokens"
      | "getReleasableAmount"
      | "owner"
      | "release"
      | "releasedAmount"
      | "renounceOwnership"
      | "totalLockedAmount"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "TokensDeposited"
      | "TokensReleased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BENEFICIARY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLIFF_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TOTAL_VESTING_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VESTING_START_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositVestingTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReleasableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releasedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BENEFICIARY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CLIFF_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_VESTING_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VESTING_START_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositVestingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReleasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releasedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensDepositedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensReleasedEvent {
  export type InputTuple = [beneficiary: AddressLike, amount: BigNumberish];
  export type OutputTuple = [beneficiary: string, amount: bigint];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenVesting extends BaseContract {
  connect(runner?: ContractRunner | null): TokenVesting;
  waitForDeployment(): Promise<this>;

  interface: TokenVestingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BENEFICIARY: TypedContractMethod<[], [string], "view">;

  CLIFF_DURATION: TypedContractMethod<[], [bigint], "view">;

  TOKEN: TypedContractMethod<[], [string], "view">;

  TOTAL_VESTING_DURATION: TypedContractMethod<[], [bigint], "view">;

  VESTING_START_TIMESTAMP: TypedContractMethod<[], [bigint], "view">;

  depositVestingTokens: TypedContractMethod<
    [_totalAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getReleasableAmount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  release: TypedContractMethod<[], [void], "nonpayable">;

  releasedAmount: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalLockedAmount: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BENEFICIARY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CLIFF_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TOTAL_VESTING_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VESTING_START_TIMESTAMP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositVestingTokens"
  ): TypedContractMethod<[_totalAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getReleasableAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releasedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalLockedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokensDeposited"
  ): TypedContractEvent<
    TokensDepositedEvent.InputTuple,
    TokensDepositedEvent.OutputTuple,
    TokensDepositedEvent.OutputObject
  >;
  getEvent(
    key: "TokensReleased"
  ): TypedContractEvent<
    TokensReleasedEvent.InputTuple,
    TokensReleasedEvent.OutputTuple,
    TokensReleasedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokensDeposited(uint256)": TypedContractEvent<
      TokensDepositedEvent.InputTuple,
      TokensDepositedEvent.OutputTuple,
      TokensDepositedEvent.OutputObject
    >;
    TokensDeposited: TypedContractEvent<
      TokensDepositedEvent.InputTuple,
      TokensDepositedEvent.OutputTuple,
      TokensDepositedEvent.OutputObject
    >;

    "TokensReleased(address,uint256)": TypedContractEvent<
      TokensReleasedEvent.InputTuple,
      TokensReleasedEvent.OutputTuple,
      TokensReleasedEvent.OutputObject
    >;
    TokensReleased: TypedContractEvent<
      TokensReleasedEvent.InputTuple,
      TokensReleasedEvent.OutputTuple,
      TokensReleasedEvent.OutputObject
    >;
  };
}
