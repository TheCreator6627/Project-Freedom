/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Staking, StakingInterface } from "../../contracts/Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_fTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_initialOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isLp",
        type: "bool",
      },
    ],
    name: "LpStatusChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "unlocksOn",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "Unstaked",
    type: "event",
  },
  {
    inputs: [],
    name: "F_TOKEN",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "STAKING_HARD_CAP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakerAddress",
        type: "address",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isLpStaker",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "lpRates",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "normalRates",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isLp",
        type: "bool",
      },
    ],
    name: "setLpStaker",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "durationInDays",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakers",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "since",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "unlocksOn",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isLpStaker",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610120604052603260a0908152606460c05260c860e05261012c610100526200002d90600590600462000139565b50604080516080810182526064815260c860208201526101909181019190915261025860608201526200006590600690600462000139565b503480156200007357600080fd5b5060405162000ede38038062000ede8339810160408190526200009691620001c3565b806001600160a01b038116620000c657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000d181620000e9565b5050600180556001600160a01b0316608052620001fb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280548282559060005260206000209081019282156200017d579160200282015b828111156200017d578251829061ffff169055916020019190600101906200015a565b506200018b9291506200018f565b5090565b5b808211156200018b576000815560010162000190565b80516001600160a01b0381168114620001be57600080fd5b919050565b60008060408385031215620001d757600080fd5b620001e283620001a6565b9150620001f260208401620001a6565b90509250929050565b608051610cba620002246000396000818160fe015281816103a501526106470152610cba6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063ba85c2591161008c578063d82e396211610066578063d82e396214610235578063f2fde38b14610248578063f3aab1041461025b578063f6c4dd8d1461026e57600080fd5b8063ba85c259146101dc578063c2277742146101ef578063d7e751ba1461022257600080fd5b80637b0472f0116100c85780637b0472f014610145578063817b1cd2146101585780638da5cb5b1461016f5780639168ae721461018057600080fd5b80632def6620146100ef57806370af9b14146100f9578063715018a61461013d575b600080fd5b6100f7610280565b005b6101207f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f761041f565b6100f7610153366004610b3e565b610431565b61016160025481565b604051908152602001610134565b6000546001600160a01b0316610120565b6101ba61018e366004610b7c565b600360208190526000918252604090912080546001820154600283015492909301549092919060ff1684565b6040805194855260208501939093529183015215156060820152608001610134565b6101616101ea366004610b9e565b6106c8565b6102126101fd366004610b7c565b60046020526000908152604090205460ff1681565b6040519015158152602001610134565b6100f7610230366004610bb7565b6106e9565b610161610243366004610b7c565b610750565b6100f7610256366004610b7c565b6108e1565b610161610269366004610b9e565b61091f565b6101616a52b7d2dcc80cd2e400000081565b61028861092f565b33600090815260036020526040902080546102e35760405162461bcd60e51b8152602060048201526016602482015275556e7374616b696e673a206e6f74207374616b696e6760501b60448201526064015b60405180910390fd5b80600201544210156103375760405162461bcd60e51b815260206004820152601f60248201527f556e7374616b696e673a206c6f636b20706572696f64206e6f74206f7665720060448201526064016102da565b600061034233610750565b905060008183600001546103569190610c09565b905082600001546002600082825461036e9190610c22565b9091555050336000818152600360208190526040822082815560018101839055600281019290925501805460ff191690556103d4907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169083610959565b8254604080519182526020820184905233917f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e910160405180910390a250505061041d60018055565b565b6104276109bd565b61041d60006109ea565b61043961092f565b6000821161047f5760405162461bcd60e51b815260206004820152601360248201527205374616b696e673a20616d6f756e74203e203606c1b60448201526064016102da565b33600090815260036020526040902054156104dc5760405162461bcd60e51b815260206004820152601860248201527f5374616b696e673a20616c7265616479207374616b696e67000000000000000060448201526064016102da565b6a52b7d2dcc80cd2e4000000826002546104f69190610c09565b11156105445760405162461bcd60e51b815260206004820152601960248201527f5374616b696e673a20686172642063617020726561636865640000000000000060448201526064016102da565b600061054f82610a3a565b9050600081116105a15760405162461bcd60e51b815260206004820152601960248201527f5374616b696e673a20696e76616c6964206475726174696f6e0000000000000060448201526064016102da565b82600260008282546105b39190610c09565b92505081905550604051806080016040528084815260200142815260200182426105dd9190610c09565b81523360008181526004602090815260408083205460ff161515948201949094528282526003808252918490208551815590850151600182015592840151600284015560609093015191909201805460ff191691151591909117905561066f906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903086610a8e565b33600081815260036020908152604091829020600201548251878152918201527f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a2506106c460018055565b5050565b600581815481106106d857600080fd5b600091825260209091200154905081565b6106f16109bd565b6001600160a01b038216600081815260046020908152604091829020805460ff191685151590811790915591519182527f479b155fd9ee4e038b5bb63a809c961882d5d8c138a03b33c7dc81c35b77975d910160405180910390a25050565b6001600160a01b0381166000908152600360208181526040808420815160808101835281548082526001830154948201949094526002820154928101929092529092015460ff161515606083015282036107ad5750600092915050565b6000816020015182604001516107c39190610c22565b9050600082606001516107d75760056107da565b60065b80548060200260200160405190810160405280929190818152602001828054801561082457602002820191906000526020600020905b815481526020019060010190808311610810575b5050505050905060006301e13380831061085a578160038151811061084b5761084b610c35565b602002602001015190506108bc565b62ed4e008310610877578160028151811061084b5761084b610c35565b6276a7008310610894578160018151811061084b5761084b610c35565b62278d0083106108bc57816000815181106108b1576108b1610c35565b602002602001015190505b8351612710906108cd908390610c4b565b6108d79190610c62565b9695505050505050565b6108e96109bd565b6001600160a01b03811661091357604051631e4fbdf760e01b8152600060048201526024016102da565b61091c816109ea565b50565b600681815481106106d857600080fd5b60026001540361095257604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b038381166024830152604482018390526109b891859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610acd565b505050565b6000546001600160a01b0316331461041d5760405163118cdaa760e01b81523360048201526024016102da565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081601e03610a4e575062278d00919050565b81605a03610a6057506276a700919050565b8160b403610a72575062ed4e00919050565b8161016d03610a8657506301e13380919050565b506000919050565b6040516001600160a01b038481166024830152838116604483015260648201839052610ac79186918216906323b872dd90608401610986565b50505050565b600080602060008451602086016000885af180610af0576040513d6000823e3d81fd5b50506000513d91508115610b08578060011415610b15565b6001600160a01b0384163b155b15610ac757604051635274afe760e01b81526001600160a01b03851660048201526024016102da565b60008060408385031215610b5157600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610b7757600080fd5b919050565b600060208284031215610b8e57600080fd5b610b9782610b60565b9392505050565b600060208284031215610bb057600080fd5b5035919050565b60008060408385031215610bca57600080fd5b610bd383610b60565b915060208301358015158114610be857600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610c1c57610c1c610bf3565b92915050565b81810381811115610c1c57610c1c610bf3565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417610c1c57610c1c610bf3565b600082610c7f57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220f1d2ad828b4af4c6079e075b8be3e3873544cde9e9dd0af94aa49f93c2a3c64164736f6c63430008140033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _fTokenAddress: AddressLike,
    _initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _fTokenAddress,
      _initialOwner,
      overrides || {}
    );
  }
  override deploy(
    _fTokenAddress: AddressLike,
    _initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _fTokenAddress,
      _initialOwner,
      overrides || {}
    ) as Promise<
      Staking & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Staking__factory {
    return super.connect(runner) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new Interface(_abi) as StakingInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Staking {
    return new Contract(address, _abi, runner) as unknown as Staking;
  }
}
